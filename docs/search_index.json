[["index.html", "Cartographie avec R Préambule", " Cartographie avec R Timothée Giraud1 &amp; Hugues Pecout2 21 octobre 2021 Préambule Créer des cartes thématiques conformes aux règles de la sémiologie graphique et de la cartographie avec R. L’objectif de ce document est de fournir un support à l’apprentissage de la cartographie avec R. mapsf Les types de cartes La mise en page Comment utiliser le manuel Le lecteur peut télécharger un projet RStudio contenant l’ensemble des données utitlisées dans le manuel ici. Il pourra ensuite tester les manipulations proposées dans le manuel directement dans le projet RStudio téléchargé. Contribution et feedback Vous pouvez nous envoyer vos remarques et suggestions en postant une issue sur le repo GitHub de ce document. La version en ligne de ce document est sous licence Creative Commons Attribution-NonCommercial-ShareAlike 4.0. UMS RIATE, CNRS, Université de Paris, F-75013 Paris, France↩︎ FR CIST, CNRS, F-75013 Paris, France↩︎ "],["chapitre1.html", "Chapitre 1 mapsf 1.1 Présentation 1.2 Documentation 1.3 Compatibilité avec graphics 1.4 Le pipe", " Chapitre 1 mapsf L’écosystème spatial du logiciel libre R est riche, dynamique et mature et plusieurs packages permettent d’importer, de traiter et de représenter les données spatiales. Le package mapsf (Giraud 2021) s’appuie sur cet écosystème pour intégrer la création de cartes thématiques de qualité dans les chaines de traitement avec R. Dautres packages peuvent être utilisés pour réaliser des cartes thématique. Le package ggplot2 (Wickham 2016), en association avec le package ggspatial (Dunnington 2021), par exemple permet d’afficher des objets spatiaux et de réaliser des cartes thématiques simples. Le package tmap (Tennekes 2018) est dédié à la création de cartes thématiques, il utilise une syntaxe proche de celle de ggplot2 (enchaînement d’instructions combinées avec le signe ‘+’). La documentation et les tutoriels pour utiliser ces deux packages sont facilement accessibles sur le web. Ici nous utiliserons principalement le package mapsf dont les fonctionnalités sont assez complètes et la prise en main assez simple. De plus le package est assez léger. 1.1 Présentation mapsf permet de créer la plupart des types de carte utilisés habituellement en cartograpie statistique (carte choroplèthes, typologies, symboles proportionnels ou gradués…). Pour chaque type de carte plusieurs paramètres permettent de personnaliser la représentation cartographique, ces paramètres sont les même que ceux que l’on retrouve dans les logiciels de SIG ou de cartographie usuels (par exemple le choix des discrétisations et des palettes de couleurs, modifications des taille des symboles ou la personnalisation des légendes). Associées aux fonctions de représesentation des données d’autres fonctions sont dédiées à l’habillage cartographique (thèmes ou chartes graphiques, légendes, échelles, flèches d’orientation, titre, crédits, annotations…), à la création de cartons ou à l’export des cartes. mapsf est le successeur de cartography (Giraud and Lambert 2017), il offre les mêmes fonctionnalités principales tout en étant plus léger et plus ergonomique. 1.2 Documentation Pour utiliser ce package plusieurs sources peuvent être consultées : La documentation du package accessible sur internet ou directement dans R (?mapsf), Les vignettes associées au package présentent des exemples de scripts, Le blog R Géomatique qui met à disposition ressources et exemples liés au package et plus généralement à l’écosystème spatiale de R. 1.3 Compatibilité avec graphics mapsf utilise le système de graphique de base de R (le package graphics (R Core Team 2021)). Il est donc assez aisé de combiner les éléments graphiques produit par le package et d’autres éléments graphiques (textes, plot, images…). Notez toutefois que mapsf utilise une solution ad-hoc pour la gestion des marges. Pour ajouter des éléments graphiques externe à mapsf vous devrez utiliser par(xpd = TRUE). 1.4 Le pipe mapsf est compatible avec la syntaxe pipe (|&gt; et %&gt;%). References "],["chapitre2.html", "Chapitre 2 Les types de cartes 2.1 Les données d’exemple 2.2 Afficher un fond de carte 2.3 Carte de symboles proportionnels 2.4 Carte choroplèthe 2.5 Carte de typologie 2.6 Carte de stocks et de ratios 2.7 Carte de stocks et de qualitative", " Chapitre 2 Les types de cartes La fonction mf_map() est la fonction centrale du package mapsf, cette fonction permet de réaliser la plupart des repreésentation usuelles en cartographie. Ces arguments principaux sont : x, un objet sf ; var, le nom de la variable à représenter ; type, le type de représentation. 2.1 Les données d’exemple Les lignes suivantes importent les couches d’information spatiales situées dans le fichier geopackage lot46.gpkg. library(sf) # import des communes du Lot com &lt;- st_read(&quot;data/lot46.gpkg&quot;, layer = &quot;commune&quot;, quiet = TRUE) # import des départments français dep &lt;- st_read(&quot;data/lot46.gpkg&quot;, layer = &quot;departement&quot;, quiet = TRUE) # import des restaurants resto &lt;- st_read(&quot;data/lot46.gpkg&quot;, layer = &quot;restaurant&quot;, quiet = TRUE) # import des routes route &lt;- st_read(&quot;data/lot46.gpkg&quot;, layer = &quot;route&quot;, quiet = TRUE) 2.2 Afficher un fond de carte Utilisé sans précision de type, la fonction mf_map() affiche simplement le fond de carte. library(mapsf) # Communes mf_map(x = com, border = &quot;white&quot;) mf_map(x = dep, lwd = 2, col = NA, add = TRUE) mf_map(x = route, lwd = .5, col = &quot;ivory4&quot;, add = TRUE) mf_map(x = resto, pch = 20, cex = .7, col = &quot;darkred&quot;, add = TRUE) 2.3 Carte de symboles proportionnels Les cartes de symboles proportionnels sont utilisées pour représenter les variables de stocks (variables quantitatives absolues, la somme et la moyenne ont un sens). La fonction mf_map(..., type = \"prop\") propose cette représentation, plusieurs symboles sont disponibles : cercles, carrés. # Communes mf_map(x = com) # Symboles proportionnels mf_map( x = com, var = &quot;POPULATION&quot;, type = &quot;prop&quot;, leg_title = &quot;Population totale\\n(2015)&quot; ) # Titre mf_title(&quot;Distribution de la population dans le Lot&quot;) 2.3.1 Comparer plusieurs cartes Il est possible de fixer les dimensions du plus grand symbole correspondant à une certaine valeur avec les arguments inches et val_max. Nous pouvons ainsi construire des cartes en symboles proportionnels comparables. # Afficher deux cartes en vis à vis par(mfrow = c(1,2)) # Communes mf_map(x = com, border = &quot;grey90&quot;, lwd = .5) # Population active occupée dans l&#39;industrie, les hommes mf_map( x = com, var = &quot;IND_H&quot;, type = &quot;prop&quot;, inches = .2, val_max = 600, leg_title = &quot;Hommes&quot;, leg_val_cex = .5, ) # ajout d&#39;un titre mf_title(&quot;Population active occupée dans l&#39;industrie&quot;) # Communes mf_map(x = com, border = &quot;grey90&quot;, lwd = .5) # Population active occupée dans l&#39;industrie, les femmes mf_map( x = com, var = &quot;IND_F&quot;, type = &quot;prop&quot;, inches = .2, val_max = 600, leg_title =&quot;Femmes&quot;, leg_val_cex = .5 ) # ajout d&#39;un titre mf_title(&quot;Population active occupée dans l&#39;industrie&quot;) Nous avons ici affiché deux cartes en vis à vis, voir XXXX pour plus de détails. 2.3.2 Les cartes de liens proportionnels TO DO 2.4 Carte choroplèthe Les cartes choroplèthes sont utilisées pour représenter les variables de ratios (variables quantitatives relatives, la moyenne a un sens, la somme n’a pas de sens). Pour ce genre de représentation il faut au préalable : choisir une méthode de discrétisation pour transformer une série statistique continue en classes définies par des intervalles, choisir un nombre de classes, choisir une palette de couleurs. La fonction mf_map(..., type = \"choro\") permet de créer des cartes choroplètes. Les arguments nbreaks, et breaks servent à paramétrer les discrétisations et la fonction mf_get_breaks() permet de travailler sur les discrétisations en dehors de la fonction mf_map(). De même, l’argument pal est utilisé pour renseigner une palette de couleur mais plusieurs fonctions peuvent être utilisées pour paramétrer les palettes en dehors de la fonction (mf_get_pal…). # Densité de population (hab./km2) en utilisant la fonction sf::st_area() com$DENS &lt;- 1e6 * com$POP / as.numeric(st_area(com)) mf_map( x = com, var = &quot;DENS&quot;, type = &quot;choro&quot;, breaks = &quot;quantile&quot;, pal = &quot;Dark Mint&quot;, lwd = 1, leg_title = &quot;Densité de population\\n(habitants par km2)&quot;, leg_val_rnd = 0 ) mf_title(&quot;Distribution de la population dans le Lot (2018)&quot;) 2.4.1 Discrétisations La fonction mf_get_breaks() met à disposition les méthodes de discrétisations de variables classique : quantiles, moyenn/écart-type, amplitudes égales, moyennes emboitées, Fisher-Jenks, géométrique … com$POP_ACT &lt;- com$AGR_H + com$AGR_F + com$IND_H + com$IND_F + com$BTP_H + com$BTP_F + com$TER_H + com$TER_F com$SHARE_ACT &lt;- 100 * com$POP_ACT / com$POPULATION d1 &lt;- mf_get_breaks(com$SHARE_ACT, nbreaks = 6, breaks = &quot;equal&quot;, freq = T) d2 &lt;- mf_get_breaks(com$SHARE_ACT, nbreaks = 6, breaks = &quot;quantile&quot;) d3 &lt;- mf_get_breaks(com$SHARE_ACT, nbreaks = 6, breaks = &quot;geom&quot;) d4 &lt;- mf_get_breaks(com$SHARE_ACT, breaks = &quot;msd&quot;, central = FALSE) 2.5 Carte de typologie Les cartes de typologies sont utilisées pour représenter les variables qualitatives. La fonction mf_map(..., type = \"typo\") propose cette représentation. mf_map( x = com, var=&quot;STATUT&quot;, type = &quot;typo&quot;, pal = c(&quot;aquamarine4&quot;, &quot;yellow3&quot;,&quot;wheat&quot;), lwd = .7, leg_title = &quot;&quot; ) mf_title(&quot;Statut Administratif&quot;) 2.5.1 Ordonner les valeurs dans la légende L’argument val_order sert à ordonner les modalités dans la légende. mf_map( x = com, var=&quot;STATUT&quot;, type = &quot;typo&quot;, pal = c(&quot;aquamarine4&quot;, &quot;yellow3&quot;,&quot;wheat&quot;), val_order = c(&quot;Préfecture&quot;, &quot;Sous-préfecture&quot;, &quot;Commune simple&quot;), lwd = .7, leg_title = &quot;&quot; ) mf_title(&quot;Statut Administratif&quot;) 2.5.2 Les cartes de points Quand l’implantation de la couche est ponctuelle, des symboles sont utilisés pour porter les couleurs de la typologie. # extraction des centroids de la préfectures et des sous préfectures com_ctr &lt;- st_centroid(com[com$STATUT != &quot;Commune simple&quot;, ]) mf_map(com) mf_map( x = com_ctr, var = &quot;STATUT&quot;, type = &quot;typo&quot;, cex = 3, pch = 23, pal = c(&quot;aquamarine4&quot;, &quot;yellow3&quot;), leg_title = &quot;&quot;, add = TRUE ) mf_title(&quot;Statut Administratif&quot;) 2.5.3 Les cartes de lignes # Sélection des routes qui intersectent la commune de Cahors cahors &lt;- com[com$NOM_COM == &quot;Cahors&quot;, ] route_cahors &lt;- route[st_intersects(x = route, y = cahors, sparse = FALSE), ] mf_map(cahors) mf_map( x = route_cahors, var = &quot;VOCATION&quot;, type = &quot;typo&quot;, lwd = 2, pal = mf_get_pal(n = 4, &quot;Dark 2&quot;), leg_title = &quot;Type de route&quot;, add = TRUE ) mf_title(&quot;Statut Administratif&quot;) 2.6 Carte de stocks et de ratios La fonction mf_map(..., var = c(\"var1\", \"var2\"), type = \"prop_tchoro\") représente des symboles proportionnels dont les surfaces sont proportionnelles aux valeurs d’une variable et dont la couleur repose sur la discrétisation d’une seconde variable. La fonction utilise les arguments des fonctions mf_map(..., type = \"prop\") et mf_map(..., type = \"choro\"). mf_map(x = com) mf_map( x = com, var = c(&quot;POPULATION&quot;, &quot;DENS&quot;), type = &quot;prop_choro&quot;, border = &quot;grey50&quot;, lwd = 1, leg_pos = c(&quot;topright&quot;, &quot;topleft&quot;), leg_title = c(&quot;Population&quot;, &quot;Densité\\nde population\\n(en hab./km2)&quot;), breaks = &quot;q6&quot;, pal = &quot;Magenta&quot;, leg_val_rnd = c(0,1)) mf_title(&quot;Population&quot;) 2.7 Carte de stocks et de qualitative La fonction mf_map(..., var = c(\"var1\", \"var2\"), type = \"prop_typo\") représente des symboles proportionnels dont les surfaces sont proportionnelles aux valeurs d’une variable et dont la couleur représente les modalités d’une variable qualitative. La fonction utilise les arguments des fonctions mf_map(..., type = \"prop\") et mf_map(..., type = \"typo\"). mf_map(x = com) mf_map( x = com, var = c(&quot;POPULATION&quot;, &quot;STATUT&quot;), type = &quot;prop_typo&quot;, pal = c(&quot;aquamarine4&quot;, &quot;yellow3&quot;,&quot;wheat&quot;), val_order = c(&quot;Préfecture&quot;, &quot;Sous-préfecture&quot;, &quot;Commune simple&quot;), leg_pos = c(&quot;bottomleft&quot;,&quot;topleft&quot;), leg_title = c(&quot;Population\\n(2015)&quot;, &quot;Statut administratif&quot;), ) mf_title(&quot;Population&quot;) "],["chapitre3.html", "Chapitre 3 La mise en page 3.1 Les données d’exemple 3.2 Les thèmes 3.3 Les titres 3.4 Flèche d’orientation 3.5 Échelle 3.6 Crédits 3.7 Habillage complet 3.8 Annotations 3.9 Les légendes 3.10 Étiquettes 3.11 Centrer la carte sur une région 3.12 Afficher plusieurs cartes sur la même figure 3.13 Export des cartes 3.14 Ajouter une image sur une carte 3.15 Placer précisément un élément sur la carte 3.16 Ajouter un ombrage à une couche 3.17 Création de cartons", " Chapitre 3 La mise en page Pour être finalisée, une carte thématique doit contenir certains éléments aditionnels tels que : le titre, l’auteur, la source, l’échelle, l’orientation… 3.1 Les données d’exemple Les lignes suivantes importent les couches d’information spatiales situées dans le fichier geopackage lot46.gpkg. library(sf) # import des communes du Lot com &lt;- st_read(&quot;data/lot46.gpkg&quot;, layer = &quot;commune&quot;, quiet = TRUE) # import des départments français dep &lt;- st_read(&quot;data/lot46.gpkg&quot;, layer = &quot;departement&quot;, quiet = TRUE) # import des restaurants resto &lt;- st_read(&quot;data/lot46.gpkg&quot;, layer = &quot;restaurant&quot;, quiet = TRUE) # import des routes route &lt;- st_read(&quot;data/lot46.gpkg&quot;, layer = &quot;route&quot;, quiet = TRUE) 3.2 Les thèmes La fonction mf_theme() défini un thème cartographique. L’utilisation d’un thème permet permet de définir plusieurs paramètres graphiques qui sont ensuite appilqués aux cartes créées avec mapsf. Ces paramètres sont : les marges de la figure, la couleur principale, la couleur de fond, la position et l’aspect du titre. Un thème peut également être défini avec les fonction mf_init() et mf_export(). 3.2.1 Utiliser un thème prédéfini Une série de thèmes prédéfinis est disponible par défault (voir ?mf_theme). library(mapsf) # utilisation d&#39;une couleur de fond pour la figure, pour voir l&#39;utilisation des marges opar &lt;- par(mfrow = c(2,2)) # Utilisation d&#39;un thème prédéfini mf_theme(&quot;default&quot;) mf_map(com) mf_title(&quot;Theme : &#39;default&#39;&quot;) mf_theme(&quot;darkula&quot;) mf_map(com) mf_title(&quot;Theme : &#39;darkula&#39;&quot;) mf_theme(&quot;candy&quot;) mf_map(com) mf_title(&quot;Theme : &#39;candy&#39;&quot;) mf_theme(&quot;nevermind&quot;) mf_map(com) mf_title(&quot;Theme : &#39;nevermind&#39;&quot;) par(opar) 3.2.2 Modifier un thème existant Il est possible de modfier un thème existant. Dans cet exemple nous utilisons le thème “default” et nous en modifions quelques paramètres. library(mapsf) opar &lt;- par(mfrow = c(1,2)) mf_theme(&quot;default&quot;) mf_map(com) mf_title(&quot;default&quot;) mf_theme(&quot;default&quot;, tab = FALSE, font = 4, bg = &quot;grey60&quot;, pos = &quot;center&quot;) mf_map(com) mf_title(&quot;modified default&quot;) par(opar) 3.2.3 Créer un thème Il est également possible de créer un theme. mf_theme( bg = &quot;lightblue&quot;, fg = &quot;tomato1&quot;, mar = c(0,0,1.5,0), tab = FALSE, inner = FALSE, line = 1.5, pos = &quot;center&quot;, cex = 1.2, font = 2 ) mf_map(com) mf_title(&quot;New theme&quot;) 3.3 Les titres mf_theme(&quot;default&quot;) mf_map(com) mf_title(&quot;New theme&quot;) 3.4 Flèche d’orientation La fonction mf_arrow() permet de choisir la position et l’aspect de la flèche d’orientation. mf_map(com) mf_arrow() 3.5 Échelle La fonction mf_scale() permet de choisir la position et l’aspect de l’échelle. mf_map(com) mf_scale( size = 10, lwd = 2, cex = 1.2, ) 3.6 Crédits La fonction mf_credits() permet d’afficher une ligne de crédits (sources, auteur…). mf_map(com) mf_credits(&quot;IGN\\nGiraud &amp; Pécout, 2021&quot;) 3.7 Habillage complet La fonction mf_layout() permet d’afficher tous ces éléments. mf_map(com) mf_layout( title = &quot;Martinique&quot;, credits = &quot;IGN\\nGiraud &amp; Pécout, 2021&quot;, arrow = TRUE ) 3.8 Annotations mf_map(com) mf_annotation(com[com$NOM_COM == &quot;Cahors&quot;,], txt = &quot;Cahors&quot;, halo = TRUE, cex = 1.5) 3.9 Les légendes mf_map(com) mf_legend(type = &quot;prop&quot;, val = c(1000,500,200,10), inches = .5, title = &quot;Population&quot;) 3.10 Étiquettes La fonction mf_label() est dédiée à l’afichage d’étiquettes. com_sel &lt;- com[st_intersects(com, com[com$NOM_COM == &quot;Cahors&quot;, ], sparse = F), ] mf_map(com_sel) mf_label( x = com_sel, var = &quot;NOM_COM&quot;, col= &quot;black&quot;, halo = TRUE, overlap = FALSE, lines = FALSE ) # layoutLayer(title = &quot;Communes&quot;, tabtitle = TRUE, author = &quot;INSEE, 2016&quot;, # sources =&quot;&quot;, north =TRUE, frame = FALSE, scale = 5) L’argument halo = TRUE permet d’afficher un leger halo autour des étiquettes et l’argument overlap = FALSE permet de créer des étiquettes ne se recouvrant pas. 3.11 Centrer la carte sur une région mf_init(x = com_sel, theme = &quot;iceberg&quot;) mf_map(com, add = TRUE) mf_map(com_sel, col = NA, border = &quot;red&quot;, lwd = 2, add = TRUE) 3.12 Afficher plusieurs cartes sur la même figure Il faut ici utiliser l’argument mfrow de la fonction par(). Le premier chiffre représente le nombre lignes et le deuxième le nombre de colonnes. 3.13 Export des cartes Il est assez difficile d’exporter des figures (cartes ou autres) dont le ratio hauteur/largeur soit satisfaisant. Le ratio par défaut des figure au format png est de 1 (480x480 pixels) : Sur cette carte beaucoup d’espace est perdu à l’est et à l’ouest de l’ile. L’emprise de cette carte est exactement celle de l’île. 3.14 Ajouter une image sur une carte Cela peut être utile pour ajouter un logo, un pictogramme. La fonction readPNG() du package png permet l’ajout d’images sur une figure. mf_theme(&quot;green&quot;) library(png) # import de l&#39;image logo &lt;- readPNG(&quot;img/mapmonster.png&quot;) # dimension de l&#39;image en unité de la carte pp &lt;- dim(logo)[2:1] * 16 # Définition d&#39;un point d&#39;encrage de l&#39;image dans la figure, ici # le coin inférieur gauche de la bounding box de la martique. xy &lt;- st_bbox(com)[1:2] mf_map(com, col = &quot;#D1914D&quot;, border = &quot;white&quot;) rasterImage( image = logo, xleft = xy[1], ybottom = xy[2], xright = xy[1] + pp[1], ytop = xy[2] + pp[2] ) mf_layout() 3.15 Placer précisément un élément sur la carte La fonction locator() permet de cliquer sur une figure et d’obtenir les coordonnées d’un point dans le système de coordonnées de la figure (de la carte). locator()peut être utilisée sur la plupart des graphiques (pas ceux produits avec ggplot2). How to interactively position legends and layout elements on a map with cartography 3.16 Ajouter un ombrage à une couche mf_shadow(com, col = &quot;grey50&quot;) mf_map(com, col=&quot;darkseagreen3&quot;, border=&quot;darkseagreen4&quot;, add=TRUE) 3.17 Création de cartons mf_init(x = com_sel, theme = &quot;agolalight&quot;, expandBB = c(0,0,0,.5)) mf_map(com, add = TRUE) mf_map(com_sel, col = &quot;tomato4&quot;, border = &quot;tomato1&quot;, lwd = 2, add = TRUE) mf_inset_on(x = com, pos = &quot;topright&quot;, cex = .33) mf_map(com) mf_map(com_sel, col = &quot;tomato4&quot;, border = &quot;tomato1&quot;, lwd = .5, add = TRUE) mf_scale(size = 10, pos = &quot;bottomright&quot;, cex = .6, lwd = .5) mf_inset_off() "],["sessioninfo.html", "Chapitre 4 sessionInfo()", " Chapitre 4 sessionInfo() R version 4.1.1 (2021-08-10) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Debian GNU/Linux 11 (bullseye) Matrix products: default BLAS: /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 locale: [1] LC_CTYPE=fr_FR.UTF-8 LC_NUMERIC=C LC_TIME=fr_FR.UTF-8 [4] LC_COLLATE=fr_FR.UTF-8 LC_MONETARY=fr_FR.UTF-8 LC_MESSAGES=fr_FR.UTF-8 [7] LC_PAPER=fr_FR.UTF-8 LC_NAME=C LC_ADDRESS=C [10] LC_TELEPHONE=C LC_MEASUREMENT=fr_FR.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats graphics grDevices utils datasets methods base other attached packages: [1] png_0.1-7 mapsf_0.3.0 sf_1.0-3 knitr_1.36 loaded via a namespace (and not attached): [1] Rcpp_1.0.7 highr_0.9 bslib_0.3.1 compiler_4.1.1 [5] pillar_1.6.4 jquerylib_0.1.4 class_7.3-19 tools_4.1.1 [9] digest_0.6.28 tibble_3.1.5 jsonlite_1.7.2 evaluate_0.14 [13] lifecycle_1.0.1 pkgconfig_2.0.3 rlang_0.4.12 DBI_1.1.1 [17] rstudioapi_0.13 yaml_2.2.1 xfun_0.27 fastmap_1.1.0 [21] e1071_1.7-9 stringr_1.4.0 dplyr_1.0.7 generics_0.1.0 [25] sass_0.4.0 vctrs_0.3.8 tidyselect_1.1.1 classInt_0.4-3 [29] grid_4.1.1 glue_1.4.2 R6_2.5.1 fansi_0.5.0 [33] rmarkdown_2.11 bookdown_0.24 purrr_0.3.4 magrittr_2.0.1 [37] htmltools_0.5.2 ellipsis_0.3.2 units_0.7-2 assertthat_0.2.1 [41] utf8_1.2.2 KernSmooth_2.23-20 stringi_1.7.5 proxy_0.4-26 [45] crayon_1.4.1 "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
